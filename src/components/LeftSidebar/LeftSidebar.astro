---
import { SIDEBAR } from '../../config'
import SidebarItem from './SidebarItem.astro'

type Props = {
	currentPage: string
}

const { currentPage } = Astro.props as Props
const currentPageMatch = currentPage.endsWith('/')
	? currentPage.slice(1, -1)
	: currentPage.slice(1)
---

<nav id="toggleable-sidebar" data-sidebar-shown='false' aria-labelledby='grid-left' class="lg:min-w-[300px] sm:min-w-[250px] desktop-ui:mr-4 hidden desktop-ui:block data-[sidebar-shown=true]:block desktop-ui:static fixed bg-theme-base/90 desktop-ui:w-fit w-full left-0 top-[50px] desktop-ui:px-0 desktop-ui:pt-0 pt-4 z-[52] backdrop-blur px-0">
	<ul id="toggleable-sidebar-overflow" class='h-screen overflow-x-visible overflow-y-auto desktop-ui:px-4 flex flex-col gap-4 desktop-ui:pb-32 pb-48 pt-1 desktop-ui:pl-1'>
	{
			Object.entries(SIDEBAR).map(([header, children]) => (
				<li class="w-full">
					<div class='ring-1 ring-basetext/10 p-2 rounded-md desktop-ui:mx-0 mx-6 desktop-ui:mr-2 '>
						<h2 class='text-lg font-bold'>{header}</h2>
						<ul>
							{children.map((child) => {
								const url = Astro.site?.pathname + child.link
								const isCurrentPage = currentPageMatch === child.link

								return (
									<SidebarItem url={url} isCurrentPage={isCurrentPage ? 'page' : false}>
										{child.text}
										</SidebarItem>
								)
							})}
						</ul>
					</div>
				</li>
			))
		}
	</ul>
</nav>

<script is:inline>
window.addEventListener('DOMContentLoaded', () => {
	const target = document.querySelector('[aria-current="page"]')

	if (target && target.offsetTop > window.innerHeight - 100) {
		document.querySelector('.nav-groups').scrollTop = target.offsetTop
	}
})
</script>
